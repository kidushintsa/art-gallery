// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
 
model User {
  id                String   @id @default(cuid())
  name              String?
  email             String?  @unique
  image             String?
  role              Role?
  payoutMethod      String?
  payoutAccount     String?
  AccountHolderName String?
  complain          Complaint[]
  // Relations
  artworks          Artwork[]     // Artist uploads
  cartItems         CartItem[]    // Customer cart
  orders            Order[]       // Customer orders
  orderItems        OrderItem[]   // Artist revenue tracking
  payouts           Payout[]      // Artist payouts
}


enum Role {
  CUSTOMER
  ARTIST
  ADMIN
}

model Artwork {
  id           String    @id @default(cuid())
  title       String
  description String
  price       Float
  imageUrl    String
  status    Status? @default(PENDING)
  createdAt   DateTime  @default(now())
  user      User  @relation(fields: [artistId], references: [id])
  artistId    String
  orderItems  OrderItem[]
  cartItems   CartItem[]
}

enum Status {
  APPROVED
  REJECTED
  PENDING
}
model CartItem {
  id          String    @id @default(cuid())
  addedAt    DateTime  @default(now())
  userId     String
  user       User  @relation(fields: [userId], references: [id])
  artworkId  String
  artwork    Artwork   @relation(fields: [artworkId], references: [id])
}

model Order {
  id             String        @id @default(cuid())
  totalAmount    Float
  paymentStatus  PaymentStatus @default(PENDING)
  paymentMethod  String?
  chapaTxRef     String?
  createdAt      DateTime      @default(now())

  userId         String
  user           User          @relation(fields: [userId], references: [id])

  orderItems     OrderItem[]
}


enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

model OrderItem {
  id             String    @id @default(cuid())
  price         Float
  artistCut     Float
  payoutStatus  PayoutStatus  @default(UNPAID)
  payoutDate    DateTime?

  orderId       String
  order         Order         @relation(fields: [orderId], references: [id])

  artworkId     String
  artwork       Artwork       @relation(fields: [artworkId], references: [id])

  artistId      String
  user        User     @relation(fields: [artistId], references: [id])
}

enum PayoutStatus {
  UNPAID
  PAID
}

model Payout {
  id          String    @id @default(cuid())
  amount     Float
  method     String
  reference  String?
  createdAt  DateTime  @default(now())
  artistId   String
  user     User  @relation(fields: [artistId], references: [id])
}
model Complaint {
  id        String   @id @default(cuid())
  subject   String
  message   String
  response  String?     // Optional admin response
  createdAt DateTime @default(now())
  category String
  status   categoryStatus? @default(PENDING)
  // Relation to the user who submitted it
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

enum categoryStatus {
  PENDING
  HANDLED
}
