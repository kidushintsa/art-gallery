// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  id             Int       @id @default(autoincrement())
  name           String
  email          String    @unique
  hashedPassword   String
  role           Role      @default(CUSTOMER)
  artistProfile ArtistProfile?
  createdAt      DateTime  @default(now())
  artworks       Artwork[]   @relation("ArtistArtworks")
  cartItems      CartItem[]  @relation("CustomerCart")
  orders         Order[]     @relation("CustomerOrders")
  orderItems     OrderItem[] // For artist earnings tracking
  payouts        Payout[]    // For artist payout tracking
}
model ArtistProfile {
  id            Int    @id @default(autoincrement())
  userId        Int    @unique
  user          User   @relation(fields: [userId], references: [id])
  payoutMethod  String
  payoutAccount String
}

enum Role {
  CUSTOMER
  ARTIST
  ADMIN
}

model Artwork {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  price       Float
  imageUrl    String
  approved    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  artist      User      @relation("ArtistArtworks", fields: [artistId], references: [id])
  artistId    Int
  orderItems  OrderItem[]
  cartItems   CartItem[]
}

model CartItem {
  id         Int       @id @default(autoincrement())
  addedAt    DateTime  @default(now())

  user       User      @relation("CustomerCart", fields: [userId], references: [id])
  userId     Int

  artwork    Artwork   @relation(fields: [artworkId], references: [id])
  artworkId  Int
}

model Order {
  id              Int           @id @default(autoincrement())
  totalAmount     Float
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   String?
  chapaTxRef      String?
  createdAt       DateTime      @default(now())

  user            User          @relation("CustomerOrders", fields: [userId], references: [id])
  userId          Int

  orderItems      OrderItem[]
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

model OrderItem {
  id            Int           @id @default(autoincrement())
  price         Float
  artistCut     Float
  payoutStatus  PayoutStatus  @default(UNPAID)
  payoutDate    DateTime?

  order         Order         @relation(fields: [orderId], references: [id])
  orderId       Int

  artwork       Artwork       @relation(fields: [artworkId], references: [id])
  artworkId     Int

  artist        User          @relation(fields: [artistId], references: [id])
  artistId      Int
}

enum PayoutStatus {
  UNPAID
  PAID
}

model Payout {
  id         Int       @id @default(autoincrement())
  amount     Float
  method     String
  reference  String?
  createdAt  DateTime  @default(now())

  artist     User      @relation(fields: [artistId], references: [id])
  artistId   Int
}
