// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  image         String?
  role           Role?
    payoutMethod  String?
  payoutAccount String?
  AccountHolderName String?
  // userInfo      UserInfo?

//  hashedPassword   String?
//   role           Role?
//   artistProfile ArtistProfile?
//   createdAt      DateTime  @default(now())
//   artworks       Artwork[]   @relation("ArtistArtworks")
//   cartItems      CartItem[]  @relation("CustomerCart")
//   orders         Order[]     @relation("CustomerOrders")
//   orderItems     OrderItem[] // For artist earnings tracking
//   payouts        Payout[]    // For artist payout tracking
  // @@map("users")
}
 
// model ArtistProfile {
//   id            Int    @id @default(autoincrement())
//   userId        String    @unique
//   user          User   @relation(fields: [userId], references: [id])
//   payoutMethod  String
//   payoutAccount String
//   AccountHolderName String
// }

enum Role {
  CUSTOMER
  ARTIST
  ADMIN
}

// model Artwork {
//   id          Int       @id @default(autoincrement())
//   title       String
//   description String
//   price       Float
//   imageUrl    String
//   approved    Boolean   @default(false)
//   createdAt   DateTime  @default(now())
//   artist      User      @relation("ArtistArtworks", fields: [artistId], references: [id])
//   artistId    String
//   orderItems  OrderItem[]
//   cartItems   CartItem[]
// }

// model CartItem {
//   id         Int       @id @default(autoincrement())
//   addedAt    DateTime  @default(now())

//   user       User      @relation("CustomerCart", fields: [userId], references: [id])
//   userId     String

//   artwork    Artwork   @relation(fields: [artworkId], references: [id])
//   artworkId  Int
// }

// model Order {
//   id              Int           @id @default(autoincrement())
//   totalAmount     Float
//   paymentStatus   PaymentStatus @default(PENDING)
//   paymentMethod   String?
//   chapaTxRef      String?
//   createdAt       DateTime      @default(now())

//   user            User          @relation("CustomerOrders", fields: [userId], references: [id])
//   userId          String

//   orderItems      OrderItem[]
// }

// enum PaymentStatus {
//   PENDING
//   PAID
//   FAILED
// }

// model OrderItem {
//   id            Int           @id @default(autoincrement())
//   price         Float
//   artistCut     Float
//   payoutStatus  PayoutStatus  @default(UNPAID)
//   payoutDate    DateTime?

//   order         Order         @relation(fields: [orderId], references: [id])
//   orderId       Int

//   artwork       Artwork       @relation(fields: [artworkId], references: [id])
//   artworkId     Int

//   artist        User          @relation(fields: [artistId], references: [id])
//   artistId      String
// }

// enum PayoutStatus {
//   UNPAID
//   PAID
// }

// model Payout {
//   id         Int       @id @default(autoincrement())
//   amount     Float
//   method     String
//   reference  String?
//   createdAt  DateTime  @default(now())

//   artist     User      @relation(fields: [artistId], references: [id])
//   artistId   String
// }



// enum Role {
//   CUSTOMER
//   ARTIST
//   ADMIN
// }

// model Artwork {
//   id          Int       @id @default(autoincrement())
//   title       String
//   description String
//   price       Float
//   imageUrl    String
//   approved    Boolean   @default(false)
//   createdAt   DateTime  @default(now())

//   artistId    Int
//   artist      UserInfo  @relation("ArtistArtworks", fields: [artistId], references: [id])
//   orderItems  OrderItem[]
//   cartItems   CartItem[]
// }

// model CartItem {
//   id         Int       @id @default(autoincrement())
//   addedAt    DateTime  @default(now())

//   userId     Int
//   user       UserInfo  @relation("CustomerCart", fields: [userId], references: [id])

//   artworkId  Int
//   artwork    Artwork   @relation(fields: [artworkId], references: [id])
// }

// model Order {
//   id              Int           @id @default(autoincrement())
//   totalAmount     Float
//   paymentStatus   PaymentStatus @default(PENDING)
//   paymentMethod   String?
//   chapaTxRef      String?
//   createdAt       DateTime      @default(now())

//   userId          Int
//   user            UserInfo      @relation("CustomerOrders", fields: [userId], references: [id])

//   orderItems      OrderItem[]
// }

// enum PaymentStatus {
//   PENDING
//   PAID
//   FAILED
// }

// model OrderItem {
//   id            Int           @id @default(autoincrement())
//   price         Float
//   artistCut     Float
//   payoutStatus  PayoutStatus  @default(UNPAID)
//   payoutDate    DateTime?

//   orderId       Int
//   order         Order         @relation(fields: [orderId], references: [id])

//   artworkId     Int
//   artwork       Artwork       @relation(fields: [artworkId], references: [id])

//   artistId      Int
//   artist        UserInfo      @relation(fields: [artistId], references: [id])
// }

enum PayoutStatus {
  UNPAID
  PAID
}

model Payout {
  id         Int       @id @default(autoincrement())
  amount     Float
  method     String
  reference  String?
  createdAt  DateTime  @default(now())

  artistId   Int
  artist     User  @relation(fields: [artistId], references: [id])
}
